{"version":3,"sources":["scripts/main.js"],"names":["baseUrl","detailsUrl","firstReceived","document","createElement","classList","add","receivedHeading","innerText","receivedList","append","allSuccessful","allSuccessfulHeading","successfulList","getPhones","fetch","then","response","json","getFirstReceivedDetails","array","Promise","race","result","res","insertAdjacentHTML","name","id","getAllSuccessfulDetails","allSettled","map","phoneId","filter","el","status","value","body","phonesIds","phone"],"mappings":";AAAA,aAEA,IAAMA,EAAU,mEAGVC,EAAa,oEAGbC,EAAgBC,SAASC,cAAc,OAE7CF,EAAcG,UAAUC,IAAI,kBAE5B,IAAMC,EAAkBJ,SAASC,cAAc,MAE/CG,EAAgBC,UAAY,iBAE5B,IAAMC,EAAeN,SAASC,cAAc,MAE5CF,EAAcQ,OAAOH,EAAiBE,GAEtC,IAAME,EAAgBR,SAASC,cAAc,OAE7CO,EAAcN,UAAUC,IAAI,kBAE5B,IAAMM,EAAuBT,SAASC,cAAc,MAEpDQ,EAAqBJ,UAAY,iBAEjC,IAAMK,EAAiBV,SAASC,cAAc,MAM9C,SAASU,IACAC,OAAAA,MAASf,GAAAA,OAAAA,EAAT,UACJgB,KAAK,SAAAC,GAAYA,OAAAA,EAASC,SAY/B,SAASC,EAAwBC,GAC/BC,QAAQC,KAAKF,GACVJ,KAAK,SAAAC,GAAYF,OAAAA,MAAM,GAAGd,OAAAA,GAAkBgB,GAAAA,OAAAA,EAAtB,YACtBD,KAAK,SAAAO,GACJA,OAAAA,EAAOL,OAAOF,KAAK,SAAAQ,GACjBf,OAAAA,EAAagB,mBAAmB,YACdD,6BAAAA,OAAAA,EAAIE,KACNF,iCAAAA,OAAAA,EAAIG,GAHA,sBAO5B,SAASC,EAAwBR,GAC/BC,QAAQQ,WAAWT,EAAMU,IAAI,SAAAC,GAC3BhB,OAAAA,MAAM,GAAGd,OAAAA,GAAkB8B,GAAAA,OAAAA,EAAtB,aACJf,KAAK,SAAAC,GACJA,EAASe,OAAO,SAAAC,GACdA,MAAc,cAAdA,EAAGC,SAAwBJ,IAAI,SAAAG,GAAMA,OAAAA,EAAGE,MAAMjB,OAAOF,KAAK,SAAAO,GAC1DV,EAAeY,mBAAmB,YACdF,+BAAAA,OAAAA,EAAOG,KACTH,mCAAAA,OAAAA,EAAOI,GAFzB,0BAnCRhB,EAAcD,OAAOE,EAAsBC,GAE3CV,SAASiC,KAAK1B,OAAOR,EAAeS,GAOpCG,IACGE,KAAK,SAAAC,GACEoB,IAAAA,EAAYpB,EAASa,IAAI,SAAAQ,GAASA,OAAAA,EAAMX,KAE9CR,EAAwBkB,GAExBT,EAAwBS","file":"main.573525ba.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst baseUrl = 'https://mate-academy.github.io/'\n  + 'phone-catalogue-static/api/phones';\n\nconst detailsUrl = 'https://mate-academy.github.io/'\n  + 'phone-catalogue-static/api/phones/';\n\nconst firstReceived = document.createElement('div');\n\nfirstReceived.classList.add('first-received');\n\nconst receivedHeading = document.createElement('h3');\n\nreceivedHeading.innerText = 'First Received';\n\nconst receivedList = document.createElement('ul');\n\nfirstReceived.append(receivedHeading, receivedList);\n\nconst allSuccessful = document.createElement('div');\n\nallSuccessful.classList.add('all-successful');\n\nconst allSuccessfulHeading = document.createElement('h3');\n\nallSuccessfulHeading.innerText = 'All Successful';\n\nconst successfulList = document.createElement('ul');\n\nallSuccessful.append(allSuccessfulHeading, successfulList);\n\ndocument.body.append(firstReceived, allSuccessful);\n\nfunction getPhones() {\n  return fetch(`${baseUrl}.json`)\n    .then(response => response.json());\n}\n\ngetPhones()\n  .then(response => {\n    const phonesIds = response.map(phone => phone.id);\n\n    getFirstReceivedDetails(phonesIds);\n\n    getAllSuccessfulDetails(phonesIds);\n  });\n\nfunction getFirstReceivedDetails(array) {\n  Promise.race(array)\n    .then(response => fetch(`${detailsUrl}` + `${response}.json`))\n    .then(result =>\n      result.json().then(res =>\n        receivedList.insertAdjacentHTML('beforeend', `\n        <li>Phone name: ${res.name}</li>\n        <li>Phone ID: ${res.id}</li>\n      `)));\n}\n\nfunction getAllSuccessfulDetails(array) {\n  Promise.allSettled(array.map(phoneId =>\n    fetch(`${detailsUrl}` + `${phoneId}.json`)))\n    .then(response => {\n      response.filter(el =>\n        el.status === 'fulfilled').map(el => el.value.json().then(result => {\n        successfulList.insertAdjacentHTML('beforeend', `\n          <li>Phone name: ${result.name}</li>\n          <li>Phone ID: ${result.id}</li>\n        `);\n      }));\n    });\n}\n"]}